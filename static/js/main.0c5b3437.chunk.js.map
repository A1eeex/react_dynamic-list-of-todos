{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/StatusSelect.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","setCurrentTodo","todos","currentTodo","className","length","map","todo","id","completed","cn","title","type","onClick","handlerCLickInfoTodo","TodoFilter","query","setQuery","setStatusSelect","onChange","e","target","value","placeholder","event","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","StatusSelect","Loader","TodoModal","ticketStatus","ticketStatusCollor","useState","user","setUser","useEffect","userId","data","href","email","name","App","setTodos","statusSelect","loader","setLoader","errorMessage","setErrorMessage","catch","error","message","finally","filter","queryNormalize","toLowerCase","includes","All","Active","Completed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c5b3437.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  setCurrentTodo: (todo: Todo) => void;\n  todos: Todo[];\n  currentTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  setCurrentTodo,\n  todos,\n  currentTodo,\n}) => {\n  const handlerCLickInfoTodo = (todo: Todo) => {\n    setCurrentTodo(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.length > 0\n          && todos.map((todo) => (\n            <tr key={todo.id} data-cy=\"todo\" className=\"\">\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed ? (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                ) : null}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={cn({\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handlerCLickInfoTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={cn('far', {\n                        'fa-eye-slash':\n                          currentTodo && todo.id === currentTodo.id,\n                        'fa-eye': !currentTodo,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  query: string;\n  setQuery: (value: string) => void;\n  setStatusSelect: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  setStatusSelect,\n}) => {\n  // console.log(query);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => setStatusSelect(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum StatusSelect {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  currentTodo: Todo ;\n  setCurrentTodo: (value: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo, setCurrentTodo }) => {\n  const ticketStatus = currentTodo?.completed ? 'Done' : 'Planned';\n  const ticketStatusCollor = currentTodo?.completed\n    ? 'has-text-success'\n    : 'has-text-danger';\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId).then((data) => setUser(data));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={() => setCurrentTodo(null)}\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={ticketStatusCollor}>{ticketStatus}</strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { StatusSelect } from './types/StatusSelect';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n  const [statusSelect, setStatusSelect] = useState<string>('all');\n  const [loader, setLoader] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setLoader(true);\n    getTodos()\n      .then((data) => setTodos(data))\n      .catch((error) => setErrorMessage(error.message))\n      .finally(() => setLoader(false));\n  }, []);\n\n  function filterTodos() {\n    const searchFilterTodos = todos.filter((todo) => {\n      const queryNormalize = query.toLowerCase();\n\n      return todo.title.toLowerCase().includes(queryNormalize);\n    });\n\n    return searchFilterTodos.filter((todo) => {\n      switch (statusSelect) {\n        case StatusSelect.All:\n          return todo;\n        case StatusSelect.Active:\n          return todo.completed === false;\n        case StatusSelect.Completed:\n          return todo.completed === true;\n        default:\n          return todo;\n      }\n    });\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setStatusSelect={setStatusSelect}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loader && <Loader />}\n\n              {todos.length > 0 && (\n                <TodoList\n                  todos={filterTodos()}\n                  currentTodo={currentTodo}\n                  setCurrentTodo={setCurrentTodo}\n                />\n              )}\n\n              {errorMessage && <p>{errorMessage}</p>}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal\n          setCurrentTodo={setCurrentTodo}\n          currentTodo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}